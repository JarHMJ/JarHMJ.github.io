<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>frp 暴露内网k8s集群服务</title>
    <link href="/post/frp-export-service/frp-export-service.html"/>
    <url>/post/frp-export-service/frp-export-service.html</url>
    
    <content type="html"><![CDATA[<p>最近想着部署一套面试系统用来简化自己的面试工作，首先第一个问题就把我难住了——没有资源，本人只有一台小弱鸡没法来部署这个面试系统，于是想到了部门的内网机器😏，利用内网穿透技术把服务暴露出去。</p><p>之前就久闻<a href="https://gofrp.org/docs/">frp</a>的大名，golang编写的内网穿透服务，支持 TCP、UDP、HTTP、HTTPS 等多种协议，接下来就用这个来试一下吧。</p><p>目前，我的公网机器上有个k3集群，我的所有个人服务都部署在k3s中，所以我也会把frp的服务端frps部署在k3s中，方便管理，然后在内网的k8s集群内部署frp的客户端frpc，这样就能把内网的服务给暴露到公网，架构大概如下图所示：</p><p><img src="frp-export-service/image-20220630180516-u0dy0ab.png" alt="image.png"></p><h1 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h1><h2 id="frps-部署配置"><a href="#frps-部署配置" class="headerlink" title="frps 部署配置"></a>frps 部署配置</h2><p>frps 服务端程序需要部署在公网集群上，通过deployment部署，yaml如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">frps</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">frps</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">frps</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">frps</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">snowdreamtech/frps:0.33.0</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/frp</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">frps</span><br></code></pre></td></tr></table></figure><p>frps 服务端程序的配置文件通过configMap挂载进pod内的<code>/etc/frp</code>下，所以我们再创建一个configMap:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frps</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">frps.ini:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    [common]</span><br><span class="hljs-string">    bind_port=31000</span><br><span class="hljs-string">    # 服务端和客户端的 common 配置中的 token 参数一致则身份验证通过。</span><br><span class="hljs-string">    token=xxxxxxx</span><br><span class="hljs-string">    # 为了防止端口被滥用，可以手动指定允许哪些端口被使用</span><br><span class="hljs-string">    allow_ports=31001-31100</span><br><span class="hljs-string">    # trace, debug, info, warn, error</span><br><span class="hljs-string">    log_level = info</span><br></code></pre></td></tr></table></figure><p>frps 配置文件frps.ini更详细的配置可以在<a href="https://gofrp.org/docs/reference/server-configures/">服务端配置 | frp (gofrp.org)</a>查看。</p><p>frps 服务端程序bind_port 为 31000，此端口是用来和frpc客户端通信的，所以公网集群需要开通这个端口，把frps服务暴露到公网上，接着为frps创建一个nodeport类型的service，来暴露服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frps</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">31000</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">31000</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br></code></pre></td></tr></table></figure><h2 id="frpc-部署配置"><a href="#frpc-部署配置" class="headerlink" title="frpc 部署配置"></a>frpc 部署配置</h2><p>接下来，我们就可以来配置客户端程序了，frpc客户端还是通过deployment来部署，配置文件使用configMap来配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frpc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frpc</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">frpc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">frpc</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">frpc</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">frpc</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">10.29</span><span class="hljs-number">.3</span><span class="hljs-number">.18</span><span class="hljs-string">/docker.io/snowdreamtech/frpc:0.33.0</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">volumeMounts:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/frp</span><br>              <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>      <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">frpc</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">frpc</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frpc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frpc</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">frpc.ini:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    [common]</span><br><span class="hljs-string">    token=xxxxxx</span><br><span class="hljs-string">    server_addr = &quot;公网集群的node ip&quot;</span><br><span class="hljs-string">    server_port = 31000</span><br><span class="hljs-string">    log_level=info</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>配置中的<code>token</code>是用来认证的，需要和frps配置的一样; <code>server_addr</code> 是公网集群的node ip，<code>server_port</code>是之前暴露的服务端端口。</p><p>如果你跟着一起配置到这里，那么恭喜你已经完成了一大半了，frp的基础配置已经完成。接下来的那就是暴露内网的服务了。</p><h2 id="暴露内网服务"><a href="#暴露内网服务" class="headerlink" title="暴露内网服务"></a>暴露内网服务</h2><p>假设在内网集群内有个api的服务，现在我们需要通过刚才配置的frp来暴露出去。接下来更新一下frpc的配置，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frpc</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frpc</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">frpc.ini:</span> <span class="hljs-string">|-</span><br><span class="hljs-string">    [common]</span><br><span class="hljs-string">    token=xxxxxx</span><br><span class="hljs-string">    server_addr = &quot;公网集群的node ip&quot;</span><br><span class="hljs-string">    server_port = 31000</span><br><span class="hljs-string">    log_level=info</span><br><span class="hljs-string"></span><br>    [<span class="hljs-string">guestbook-ui</span>]<br>    <span class="hljs-comment">#/api</span><br>    <span class="hljs-string">type</span> <span class="hljs-string">=</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-string">local_ip=guestbook-ui.default</span><br>    <span class="hljs-string">local_port=80</span><br>    <span class="hljs-string">remote_port=31001</span><br></code></pre></td></tr></table></figure><p>新增了guestbook-ui 服务的配置，<code>type</code> 为tcp，<code>local_ip</code>设置为guestbook-ui 的svc地址，<code>local_port</code>为guestbook-ui 的svc的端口，<code>remote_port</code>为映射到frps端的端口，即访问frps的31001端口服务就能访问到guestbook-ui。</p><p>接下来，更新一下frps服务端的配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frps-port</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frps</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">port:</span> <span class="hljs-number">31001</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;port-31001&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">frps-port</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">frps</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">traefik.ingress.kubernetes.io/router.tls.certresolver:</span> <span class="hljs-string">letsencrypt</span><br>    <span class="hljs-attr">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class="hljs-string">web</span><br>    <span class="hljs-attr">traefik.ingress.kubernetes.io/router.middlewares:</span> <span class="hljs-string">kube-system-redirect@kubernetescrd</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">&quot;example.com&quot;</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/</span><br>            <span class="hljs-attr">pathType:</span> <span class="hljs-string">Prefix</span><br>            <span class="hljs-attr">backend:</span><br>              <span class="hljs-attr">service:</span><br>                <span class="hljs-attr">name:</span> <span class="hljs-string">frps-port</span><br>                <span class="hljs-attr">port:</span><br>                  <span class="hljs-attr">number:</span> <span class="hljs-number">31001</span><br></code></pre></td></tr></table></figure><p>frps服务端的配置主要是把guestbook-ui的remote_port的服务通过ingress暴露到公网，当然通过nodeport的方式也可以。</p><h2 id="后续计划："><a href="#后续计划：" class="headerlink" title="后续计划："></a>后续计划：</h2><p>其实这个方法有个弊端，就是修改完配置后每次都要重启容器，没法热加载，后续再优化。。。🍻</p><h1 id="参考文档："><a href="#参考文档：" class="headerlink" title="参考文档："></a>参考文档：</h1><p><a href="https://www.bookstack.cn/read/frp/README_zh.md">frp - 《frp v0.27 中文文档》 - 书栈网 · BookStack</a></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>traefik ingress 使用指南</title>
    <link href="/post/traefik-ingress/traefik-ingress.html"/>
    <url>/post/traefik-ingress/traefik-ingress.html</url>
    
    <content type="html"><![CDATA[<p><img src="traefik-ingress/image-20220630112815-gd519fo.png" alt="image.png"></p><p><a href="https://github.com/containous/traefik">Traefik</a> 是一个开源的可以使服务发布变得轻松有趣的边缘路由器。</p><p>下面就介绍两种在k8s中使用它的方式</p><h1 id="IngressRoute"><a href="#IngressRoute" class="headerlink" title="IngressRoute"></a>IngressRoute</h1><p>IngressRoute 是traefik自定义的CR，作用和k8s中的Ingress差不多，对外暴露集群内的服务。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># http</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">simpleingressroute</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`your.example.com`)</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">PathPrefix(`/notls`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">whoami</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-meta">---</span><br><span class="hljs-comment"># https</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">ingressroutetls</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">websecure</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`your.example.com`)</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">PathPrefix(`/tls`)</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">whoami</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>  <span class="hljs-attr">tls:</span><br>    <span class="hljs-attr">certResolver:</span> <span class="hljs-string">myresolver</span><br></code></pre></td></tr></table></figure><h1 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h1><p>另外一种方式就是使用k8s原生的ingress资源，配置上和Nginx Ingress大同小异，有一些功能需要配合Annotations使用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 开启https</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">networking.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Ingress</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">myingress</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">traefik.ingress.kubernetes.io/router.tls.certresolver:</span> <span class="hljs-string">letsencrypt</span><br>    <span class="hljs-attr">traefik.ingress.kubernetes.io/router.entrypoints:</span> <span class="hljs-string">websecure</span><br>    <span class="hljs-attr">traefik.ingress.kubernetes.io/router.tls:</span> <span class="hljs-literal">true</span>    <span class="hljs-comment"># 开启证书</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">rules:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">host:</span> <span class="hljs-string">example.com</span><br>      <span class="hljs-attr">http:</span><br>        <span class="hljs-attr">paths:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/bar</span><br>            <span class="hljs-attr">pathType:</span> <span class="hljs-string">Exact</span><br>            <span class="hljs-attr">backend:</span><br>              <span class="hljs-attr">service:</span><br>                <span class="hljs-attr">name:</span>  <span class="hljs-string">whoami</span><br>                <span class="hljs-attr">port:</span><br>                  <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">path:</span> <span class="hljs-string">/foo</span><br>            <span class="hljs-attr">pathType:</span> <span class="hljs-string">Exact</span><br>            <span class="hljs-attr">backend:</span><br>              <span class="hljs-attr">service:</span><br>                <span class="hljs-attr">name:</span>  <span class="hljs-string">whoami</span><br>                <span class="hljs-attr">port:</span><br>                  <span class="hljs-attr">number:</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p>其它的使用姿势：</p><p>后续填坑。。。</p><p>参考：</p><p><a href="https://doc.traefik.io/traefik/routing/providers/kubernetes-crd/#kind-ingressroute">Routing Configuration for Traefik CRD - Traefik</a></p><p><a href="https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#enabling-tls-via-annotations">Kubernetes Ingress Routing Configuration - Traefik</a></p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>traefik</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github action 学习</title>
    <link href="/post/github-action-study/github-action-study.html"/>
    <url>/post/github-action-study/github-action-study.html</url>
    
    <content type="html"><![CDATA[<p>目前自己blog的部署是使用github action来部署的，只要写完文章push到github仓库就能自己build和deploy，完全解放之前deploy的操作。</p><p>github action简直就是神器，可以用来做很多有意思的事情，后续有用到的话再记录吧。</p><h2 id="利用github-action部署到阿里云服务器"><a href="#利用github-action部署到阿里云服务器" class="headerlink" title="利用github action部署到阿里云服务器"></a>利用github action部署到阿里云服务器</h2><p>遇到各种坑，😂😂，不过总算把这个搞定了。<br>大概思路：</p><ol><li>服务器上部署一个webhook用来拉最新的blog文章</li><li>github action写一个step来请求这个webhook</li><li>每次push代码的时候就会触发action去请求webhook</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>ci</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>部署k3s之旅</title>
    <link href="/post/install-k3s/install-k3s.html"/>
    <url>/post/install-k3s/install-k3s.html</url>
    
    <content type="html"><![CDATA[<ol><li><p>安装k3s</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -sfL http:<span class="hljs-regexp">//</span>rancher-mirror.cnrancher.com<span class="hljs-regexp">/k3s/</span>k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -<br></code></pre></td></tr></table></figure><p>检查服务是否都起来了，都是running就ok了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">❯ kubectl <span class="hljs-keyword">get</span> po <span class="hljs-operator">-</span>A<br>NAMESPACE     NAME                                      READY   STATUS      RESTARTS   AGE<br>kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span>   <span class="hljs-keyword">local</span><span class="hljs-operator">-</span>path<span class="hljs-operator">-</span>provisioner<span class="hljs-number">-5</span>ff76fc89d<span class="hljs-operator">-</span>jswg4   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m8s<br>kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span>   metrics<span class="hljs-operator">-</span>server<span class="hljs-number">-86</span>cbb8457f<span class="hljs-operator">-</span>klq8m           <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m8s<br>kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span>   coredns<span class="hljs-number">-7448499</span>f4d<span class="hljs-operator">-</span>p8gx2                  <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m8s<br>kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span>   helm<span class="hljs-operator">-</span>install<span class="hljs-operator">-</span>traefik<span class="hljs-operator">-</span>crd<span class="hljs-number">-747</span>n2            <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     Completed   <span class="hljs-number">0</span>          <span class="hljs-number">2</span>m8s<br>kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span>   helm<span class="hljs-operator">-</span>install<span class="hljs-operator">-</span>traefik<span class="hljs-operator">-</span>h2nqf                <span class="hljs-number">0</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     Completed   <span class="hljs-number">1</span>          <span class="hljs-number">2</span>m8s<br>kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span>   svclb<span class="hljs-operator">-</span>traefik<span class="hljs-operator">-</span>wjhj6                       <span class="hljs-number">2</span><span class="hljs-operator">/</span><span class="hljs-number">2</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">67</span>s<br>kube<span class="hljs-operator">-</span><span class="hljs-keyword">system</span>   traefik<span class="hljs-number">-97</span>b44b794<span class="hljs-operator">-</span>hkhwx                   <span class="hljs-number">1</span><span class="hljs-operator">/</span><span class="hljs-number">1</span>     <span class="hljs-keyword">Running</span>     <span class="hljs-number">0</span>          <span class="hljs-number">68</span>s<br></code></pre></td></tr></table></figure></li><li><p>启用traefik的dashboard<br>traefik从2.0版本开始dashboard默认是不会启用的，所以还需要自己手动开启，部署一下IngressRoute,把端口暴露出去</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`traefik.qikqiak.com`)</span>  <span class="hljs-comment"># 指定域名</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">api@internal</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">TraefikService</span>  <span class="hljs-comment"># 引用另外的 Traefik Service</span><br></code></pre></td></tr></table></figure><p>默认情况下 Traefik 的 IngressRoute 已经允许跨 namespace 进行通信了，可以通过设置参数 –providers.kubernetescrd.allowCrossNamespace=true 开启（默认已经开启），开启后 IngressRoute 就可以引用 IngressRoute 命名空间以外的其他命名空间中的任何资源了。</p></li><li><p>自动生成HTTPS证书<br>Traefik支持使用Let’s Encrypt自动生成证书，要使用 Let’s Encrypt 来进行自动化 HTTPS，就需要首先开启 ACME，开启 ACME 需要通过静态配置的方式，也就是说可以通过环境变量、启动参数等方式来提供。</p></li></ol><p>修改traefik的配置文件<code>/var/lib/rancher/k3s/server/manifests/traefik.yaml</code>，保存后会自动更新traefik的pod</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">additionalArguments:</span><br>- <span class="hljs-string">&quot;--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json&quot;</span><br>- <span class="hljs-string">&quot;--certificatesresolvers.letsencrypt.acme.email=849104648@qq.com&quot;</span><br>- <span class="hljs-string">&quot;--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web&quot;</span><br><span class="hljs-symbol">persistence:</span><br><span class="hljs-symbol">  enabled:</span> true<br><span class="hljs-symbol">securityContext:</span><br><span class="hljs-symbol">  readOnlyRootFilesystem:</span> false<br><span class="hljs-symbol">  runAsGroup:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">  runAsUser:</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">  runAsNonRoot:</span> false<br></code></pre></td></tr></table></figure><p>这样traefik就可以自动帮我们配置证书了</p><p>再修改一下之前部署的ingressroute，使之使用证书</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">traefik.containo.us/v1alpha1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">IngressRoute</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">traefik-dashboard</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">entryPoints:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">routes:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">match:</span> <span class="hljs-string">Host(`traefik.qikqiak.com`)</span>  <span class="hljs-comment"># 指定域名</span><br>    <span class="hljs-attr">kind:</span> <span class="hljs-string">Rule</span><br>    <span class="hljs-attr">services:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">api@internal</span><br>      <span class="hljs-attr">kind:</span> <span class="hljs-string">TraefikService</span>  <span class="hljs-comment"># 引用另外的 Traefik Service</span><br>  <span class="hljs-attr">tls:</span><br>    <span class="hljs-attr">certResolver:</span> <span class="hljs-string">letsencrypt</span><br></code></pre></td></tr></table></figure><p>总结：本次部署k3s还算顺利，没有存在镜像之类拉不下来的情况，因为有中文官网，本地化也做的不做，文档里直接提供的官方的镜像，不过配置traefik的时候有点坑需要爬一下，多看看traefik的文档吧！！！🍻🍻🍻</p>]]></content>
    
    
    <categories>
      
      <category>云原生</category>
      
    </categories>
    
    
    <tags>
      
      <tag>k3s</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>http身份认证介绍</title>
    <link href="/post/http-auth/http-auth.html"/>
    <url>/post/http-auth/http-auth.html</url>
    
    <content type="html"><![CDATA[<p>今天调试同事之前写的接口，使用的是basic认证，但是当我在浏览器里输入地址，敲回车的时候，<br>服务器直接给我返回了401的错误，完全不给我输密码的机会，我就纳闷了为啥之前的都有，现在就没了？<br>满头的问号？？？</p><p>后来查阅资料才发现，http协议是定义了一套身份认证的流程，照着这个流程走就会弹窗让输入密码。</p><p><img src="http-auth/1.png" alt="1"></p><p>流程：服务器端向客户端返回 <code>401</code>（Unauthorized，未被授权的） 状态码，并在 <code>WWW-Authenticate</code> 首部提供如何进行验证的信息，其中至少包含有一种质询方式。之后有意向证明自己身份的客户端可以在新的请求中添加  <code>Authorization</code> 首部字段进行验证，字段值为身份验证凭证信息。通常客户端会弹出一个密码框让用户填写，然后发送包含有恰当的 <code>Authorization</code> 首部的请求。</p><p>简单点说就是在返回的请求头里面加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">WWW-Authenticate: <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span> realm=<span class="hljs-tag">&lt;<span class="hljs-name">realm</span>&gt;</span><br></code></pre></td></tr></table></figure><p>来告诉用户你要用什么认证方案进行认证</p><p>然后发送的请求头里面加上：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Authorization: <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">credentials</span>&gt;</span><br></code></pre></td></tr></table></figure><p>就可以完成认证了</p><p>http 所支持的认证方式有多种，其中Basic认证是最常见的，还有下面一些认证方式：</p><ul><li><strong>Basic</strong> (查看 <a href="https://tools.ietf.org/html/rfc7617">RFC 7617</a>, base64编码凭证. 详情请参阅下文.),</li><li><strong>Bearer</strong> (查看 <a href="https://tools.ietf.org/html/rfc6750">RFC 6750</a>, bearer 令牌通过OAuth 2.0保护资源),</li><li><strong>Digest</strong> (查看 <a href="https://tools.ietf.org/html/rfc7616">RFC 7616</a>, 只有 md5 散列 在Firefox中支持, 查看 <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=472823">bug 472823</a> 用于SHA加密支持),</li><li><strong>HOBA</strong> (查看 <a href="https://tools.ietf.org/html/rfc7486">RFC 7486</a> (草案), <strong>H</strong>TTP <strong>O</strong>rigin-<strong>B</strong>ound 认证, 基于数字签名),</li><li><strong>Mutual</strong> (查看 <a href="https://tools.ietf.org/html/draft-ietf-httpauth-mutual-11">draft-ietf-httpauth-mutual</a>),</li><li><strong>AWS4-HMAC-SHA256</strong> (查看 <a href="http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using-authorization-header.html">AWS docs</a>).</li></ul><p>随后，我查看了gin的源码，也是如此：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// BasicAuthForRealm returns a Basic HTTP Authorization middleware. It takes as arguments a map[string]string where</span><br><span class="hljs-comment">// the key is the user name and the value is the password, as well as the name of the Realm.</span><br><span class="hljs-comment">// If the realm is empty, &quot;Authorization Required&quot; will be used by default.</span><br><span class="hljs-comment">// (see http://tools.ietf.org/html/rfc2617#section-1.2)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BasicAuthForRealm</span><span class="hljs-params">(accounts Accounts, realm <span class="hljs-type">string</span>)</span></span> HandlerFunc &#123;<br><span class="hljs-keyword">if</span> realm == <span class="hljs-string">&quot;&quot;</span> &#123;<br>realm = <span class="hljs-string">&quot;Authorization Required&quot;</span><br>&#125;<br>realm = <span class="hljs-string">&quot;Basic realm=&quot;</span> + strconv.Quote(realm)<br>pairs := processAccounts(accounts)<br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *Context)</span></span> &#123;<br><span class="hljs-comment">// Search user in the slice of allowed credentials</span><br>user, found := pairs.searchCredential(c.requestHeader(<span class="hljs-string">&quot;Authorization&quot;</span>))<br><span class="hljs-keyword">if</span> !found &#123;<br><span class="hljs-comment">// Credentials doesn&#x27;t match, we return 401 and abort handlers chain.</span><br>c.Header(<span class="hljs-string">&quot;WWW-Authenticate&quot;</span>, realm)<br>c.AbortWithStatus(http.StatusUnauthorized)<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-comment">// The user credentials was found, set user&#x27;s id to key AuthUserKey in this context, the user&#x27;s id can be read later using</span><br><span class="hljs-comment">// c.MustGet(gin.AuthUserKey).</span><br>c.Set(AuthUserKey, user)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参考链接：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Authentication</a></p>]]></content>
    
    
    <categories>
      
      <category>http</category>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>http</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小心golang读写锁的坑</title>
    <link href="/post/golang-lock/golang-lock.html"/>
    <url>/post/golang-lock/golang-lock.html</url>
    
    <content type="html"><![CDATA[<p>避免在递归获取读锁</p>]]></content>
    
    
    <categories>
      
      <category>golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>golang</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>判断字典里是否存在键的写法</title>
    <link href="/post/check-key-in-dict/check-key-in-dict.html"/>
    <url>/post/check-key-in-dict/check-key-in-dict.html</url>
    
    <content type="html"><![CDATA[<p>首先先看两个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">test1</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">if</span> kwargs.get(<span class="hljs-string">&#x27;a&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;存在a&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不存在a&#x27;</span>)<br>        <br>        <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params">**kwargs</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;a&#x27;</span> <span class="hljs-keyword">in</span> kwargs:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;存在a&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;不存在a&#x27;</span>)<br></code></pre></td></tr></table></figure><p>乍一看，都没啥毛病，不就是判断kwargs这个字典里有没有这个键嘛。</p><p>然后我们执行一下看看结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test1:&#x27;</span>)<br>    test1(a=<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;test2:&#x27;</span>)<br>    test2(a=<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">test1:</span><br>不存在a<br><span class="hljs-symbol">test2:</span><br>存在a<br></code></pre></td></tr></table></figure><p>咦，test1明明传了a参数，为啥结果却是没有呢？</p><p>原来test1中<code>kwargs.get(&#39;a&#39;)</code>的值为0，然后if判断的时候就走了else分支。唉，坑啊！</p><p>所以以后判断字典里有没有键就老老实实用in，获取字典里键的值才用get，不然出了bug都不好排查。</p><p>注：记那些年自己写的bug😭😭😭</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git学习之旅</title>
    <link href="/post/git-study.html"/>
    <url>/post/git-study.html</url>
    
    <content type="html"><![CDATA[<h2 id="这篇不是学习git的教程，只是用于记录我掌握的git的一点点知识。"><a href="#这篇不是学习git的教程，只是用于记录我掌握的git的一点点知识。" class="headerlink" title="这篇不是学习git的教程，只是用于记录我掌握的git的一点点知识。"></a>这篇不是学习git的教程，只是用于记录我掌握的git的一点点知识。</h2><p>现在要学的东西的太多了，像git这种工具我并不会刻意的去记他的命令行，平时用sourcetree比较多，但是在服务器开发就需要熟悉各种命令行，所以这篇只记录各种git命令的使用，会一直更新。</p><h1 id="git-help"><a href="#git-help" class="headerlink" title="git help"></a>git help</h1><p>学习git的最好用的命令，记不住了看一下</p><h2 id="git变基"><a href="#git变基" class="headerlink" title="git变基"></a>git变基</h2><p>git rebase -i (需要合并的分支名)</p><p>这个只用来对自己本地的分支进行</p><h2 id="git-config-–list"><a href="#git-config-–list" class="headerlink" title="git config –list"></a>git config –list</h2><h2 id="git-pull-r"><a href="#git-pull-r" class="headerlink" title="git pull -r"></a>git pull -r</h2><h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><h2 id="git-revert"><a href="#git-revert" class="headerlink" title="git revert"></a>git revert</h2><p>用一个新的commit来撤销提交的内容</p><h2 id="git-rm-–cached-r-idea"><a href="#git-rm-–cached-r-idea" class="headerlink" title="git rm –cached -r .idea"></a>git rm –cached -r .idea</h2><p>git取消文件跟踪<br>有时候一些文件已经add到git仓库了，但是你想把这些文件添加到.gitignore中时，你需要先取消文件跟踪</p><p>未完待续……</p>]]></content>
    
    
    <categories>
      
      <category>git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>友情链接</title>
    <link href="/post/link.html"/>
    <url>/post/link.html</url>
    
    <content type="html"><![CDATA[<p>还没有，希望有相互交换的朋友联系我。</p>]]></content>
    
    
    
    <tags>
      
      <tag>友链</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
